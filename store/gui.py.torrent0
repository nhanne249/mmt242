import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton,
    QLabel, QProgressBar, QListWidget, QFileDialog, QLineEdit, QScrollArea
)
from PyQt5.QtCore import Qt, QMetaObject, pyqtSignal
import threading
import logging
import argparse
import json

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class P2PGUI(QMainWindow):
    """
    Lớp này triển khai giao diện đồ họa (GUI) để tương tác với hệ thống P2P.
    """
    save_path_requested = pyqtSignal(str, name="savePathRequested")

    def __init__(self, peer):
        """
        Khởi tạo GUI với thông tin peer.
        """
        super().__init__()
        self.peer = peer
        self.tracker_ip = peer.tracker_ip
        self.tracker_port = peer.tracker_port
        self.init_ui()
        self.download_progress_bars = {}
        self.download_status_labels = {}

        self.save_path_requested.connect(self.get_save_path)

    def init_ui(self):
        """
        Khởi tạo giao diện người dùng.
        """
        self.setWindowTitle("P2P File Sharing System")
        self.setGeometry(100, 100, 800, 600)

        main_layout = QVBoxLayout()

        shared_files_label = QLabel("Shared Files")
        self.shared_files_list = QListWidget()
        add_files_button = QPushButton("Add Files")
        add_files_button.clicked.connect(self.add_files)

        shared_files_layout = QVBoxLayout()
        shared_files_layout.addWidget(shared_files_label)
        shared_files_layout.addWidget(self.shared_files_list)
        shared_files_layout.addWidget(add_files_button)

        available_files_label = QLabel("Available Files")
        self.available_files_list = QListWidget()
        refresh_button = QPushButton("Refresh")
        refresh_button.clicked.connect(self.refresh_available_files)

        available_files_layout = QVBoxLayout()
        available_files_layout.addWidget(available_files_label)
        available_files_layout.addWidget(self.available_files_list)
        available_files_layout.addWidget(refresh_button)

        download_button = QPushButton("Download Selected")
        download_button.clicked.connect(self.download_selected_files)

        available_files_layout.addWidget(download_button)

        download_button.clicked.connect(self.download_selected_files)

        download_manager_label = QLabel("Download Manager")
        self.download_manager_layout = QVBoxLayout()
        self.download_manager_layout.addWidget(download_manager_label)

        self.download_manager_widget = QWidget()
        self.download_manager_widget.setLayout(self.download_manager_layout)
        self.download_manager_scroll = QScrollArea()
        self.download_manager_scroll.setWidget(self.download_manager_widget)
        self.download_manager_scroll.setWidgetResizable(True)

        download_manager_layout = QVBoxLayout()
        download_manager_layout.addWidget(download_manager_label)
        download_manager_layout.addWidget(self.download_manager_scroll)

        top_layout = QHBoxLayout()
        top_layout.addLayout(shared_files_layout)
        top_layout.addLayout(available_files_layout)

        main_layout.addLayout(top_layout)
        main_layout.addLayout(download_manager_layout)

        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

    def add_files(self):
        """
        Thêm các tệp để chia sẻ thông qua GUI.
        """
        file_dialog = QFileDialog()
        file_paths, _ = file_dialog.getOpenFileNames(self, "Select Files to Share")

        def process_files():
            for file_path in file_paths:
                try:
                    filename = self.peer.register_file(file_path)
                    if filename:
                        self.shared_files_list.addItem(filename)
                except Exception as e:
                    logging.error(f"Exception occurred while adding file '{file_path}': {e}")

        threading.Thread(target=process_files).start()

    def download_selected_files(self):
        """
        Tải xuống các tệp được chọn từ danh sách có sẵn.
        """
        selected_items = self.available_files_list.selectedItems()
        for item in selected_items:
            filename = item.text()

            if filename in self.download_progress_bars:
                continue

            response = self.peer.query_tracker(filename)
            if response.get("status") == "success":
                peer_chunks = response.get("file_info", {})

                progress_bar = QProgressBar()
                status_label = QLabel(f"Status: Downloading {filename}")
                self.download_manager_layout.addWidget(progress_bar)
                self.download_manager_layout.addWidget(status_label)

                self.download_progress_bars[filename] = progress_bar
                self.download_status_labels[filename] = status_label

                threading.Thread(target=self.start_download, args=(filename,)).start()

    def get_save_path(self, filename):
        """
        Lấy đường dẫn lưu tệp từ người dùng thông qua hộp thoại.
        """
        save_path, _ = QFileDialog.getSaveFileName(self, "Save File As", filename)
        self.save_path = save_path

    def start_download(self, filename):
        """
        Bắt đầu tải xuống tệp được chọn.
        """
        try:
            request = {"action": "query", "filename": filename}
            response = self.peer.send_to_tracker(request)
            file_info = json.loads(response).get("file_info", {})

            if not file_info:
                return

            self.save_path = None
            self.save_path_requested.emit(filename)

            while self.save_path is None:
                QApplication.processEvents()

            if not self.save_path:
                return

            total_chunks = len(file_info)
            self.download_progress_bars[filename].setMaximum(total_chunks)

            def update_progress(current_chunks, total_chunks):
                self.download_progress_bars[filename].setValue(current_chunks)

            self.peer.download_file(filename, file_info, self.save_path, update_progress)

            self.download_manager_layout.removeWidget(self.download_progress_bars[filename])
            self.download_manager_layout.removeWidget(self.download_status_labels[filename])
            self.download_progress_bars[filename].deleteLater()
            self.download_status_labels[filename].deleteLater()

            del self.download_progress_bars[filename]
            del self.download_status_labels[filename]
        except Exception as e:
            logging.error(f"Error starting download for '{filename}': {e}")

    def refresh_available_files(self):
        """
        Làm mới danh sách các tệp có sẵn từ tracker.
        """
        request = {"action": "list_files"}
        response = self.peer.send_to_tracker(request)

        if response:
            response_data = json.loads(response)
            if response_data.get("status") == "success":
                files = response_data.get("files", [])
                self.available_files_list.clear()
                for file in files:
                    self.available_files_list.addItem(file)


def main():
    parser = argparse.ArgumentParser(description="GUI for P2P File Sharing System")
    parser.add_argument("--peer-ip", required=True, help="IP address of the peer to connect to")
    parser.add_argument("--peer-port", type=int, required=True, help="Port of the peer to connect to")
    parser.add_argument("--tracker-ip", required=True, help="IP address of the tracker to connect to")
    parser.add_argument("--tracker-port", type=int, required=True, help="Port of the tracker to connect to")
    args = parser.parse_args()

    from peer import Peer

    peer = Peer(ip=args.peer_ip, port=args.peer_port, tracker_ip=args.tracker_ip, tracker_port=args.tracker_port)

    app = QApplication(sys.argv)
    gui = P2PGUI(peer)
    gui.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
